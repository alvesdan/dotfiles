NeoBundle 'Yggdroot/indentLine'

autocmd BufWritePre * :%s/\s\+$//e
set splitbelow
set splitright
set wrap
set linebreak
set nolist  " list disables linebreak
set tabstop=2 shiftwidth=2 expandtab

if has('gui_running')
  set guifont=Meslo\ LG\ S\ for\ Powerline:h14
endif

let base16colorspace=256
let g:base16_shell_path="~/base16-shell/"
syntax enable
set background=dark
colorscheme base16-eighties

" set t_Co=256
" let g:hybrid_use_Xresources = 1
" colorscheme hybrid_reverse

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'

" 254 #fff
" 016 #000
" 232 #080808
" 238 #444444
let g:indentLine_color_term = '238'
let g:indentLine_char = 'â”‚'
let g:indentLine_enabled = 1

augroup filetypedetect
autocmd! BufNewFile,BufRead *.ep,*.nep setf epperl
augroup END

let g:airline_theme = 'base16'
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#csv#enabled = 0
let g:airline_section_c = ''
let g:airline_section_z = '%t'
set showtabline=1
let g:airline_powerline_fonts = 1

" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = ''
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''

function! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    let tabnr = i + 1 " range() starts at 0
    let winnr = tabpagewinnr(tabnr)
    let buflist = tabpagebuflist(tabnr)
    let bufnr = buflist[winnr - 1]
    let bufname = fnamemodify(bufname(bufnr), ':t')

    let s .= '%' . tabnr . 'T'
    let s .= (tabnr == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= ' ' . tabnr

    let n = tabpagewinnr(tabnr,'$')
    if n > 1 | let s .= ':' . n | endif

    let s .= empty(bufname) ? ' [No Name] ' : ' ' . bufname . ' '

    let bufmodified = getbufvar(bufnr, "&mod")
    if bufmodified | let s .= '+ ' | endif
  endfor
  let s .= '%#TabLineFill#'
  return s
endfunction
set tabline=%!MyTabLine()
